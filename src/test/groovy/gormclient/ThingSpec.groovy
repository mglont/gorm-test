/*
 * This Spock specification was auto generated by running the Gradle 'init' task
 * by 'mglont' at '22/09/16 23:32' with Gradle 3.1
 *
 * @author mglont, @date 22/09/16 23:32
 */

package gormclient

import grails.gorm.annotation.Entity
import org.grails.orm.hibernate.HibernateDatastore
import org.grails.orm.hibernate.connections.HibernateConnectionSourceFactory
import org.hibernate.SessionFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.SpringApplicationContextLoader
import org.springframework.context.ApplicationContext
import org.springframework.test.context.ContextConfiguration
import org.springframework.transaction.annotation.EnableTransactionManagement
import org.springframework.transaction.annotation.Transactional
import org.springframework.transaction.support.TransactionSynchronizationManager
import spock.lang.Specification

@ContextConfiguration(loader = SpringApplicationContextLoader.class,
        classes = PersistenceContextConfig.class)
// DEFAULT: @TestExecutionListeners(listeners = [DependencyInjectionTestExecutionListener, TransactionalTestExecutionListener])
@EnableTransactionManagement(proxyTargetClass = true)
class ThingSpec extends Specification {
// dependency injection works -- e.g.
//    @Autowired
//    HibernateDatastore datastore
//
//    @Autowired
//    HibernateConnectionSourceFactory hibernateConnectionSourceFactory

    @Transactional
    void "gorm works"() {
        expect:
        TransactionSynchronizationManager.isSynchronizationActive()

        when:
        def p = new Pet(name: 'doggy')
        Pet.withNewSession { p.save(flush: true) }

        then:
        Pet.withNewSession { Pet.count() } == 1

        when:
        Pet doggy = Pet.withNewSession { Pet.findByName('doggy') }
        then:
        doggy.age == 0

        when:
        doggy.age--
        then:
        doggy.validate() == false

        when:
        doggy.age = 2

        then:
        Pet.withNewSession { doggy.save(flush: true) }
        !doggy.hasErrors()

        when:
        Pet.withNewSession { Pet.list()*.delete(flush: true) }

        then:
        Pet.withNewSession { Pet.count() } == 0
    }
}

@Entity
class Pet {
    String name
    int age = 0

    String toString() {
        "$name the pet"
    }

    static constraints = {
        name unique: true
        age min: 0
    }
}
